
Overall structure
Perfect — here's a **succinct architecture summary** of your modular system with clear roles for each file.

---

## 🧩 MODULE RESPONSIBILITIES OVERVIEW

### 📁 `main.py`, `main_test_keyword.py`, etc.
- **Role**: Top-level runner scripts (CLI entry points, testing tools)
- **Responsibility**: Trigger one or more tasks via the `api.py` layer
- **Typical usage**:
  ```python
  from api import run_llm_task_with_config
  run_llm_task_with_config("summarization", {"text": ...}, mode="balanced", loader_type="hf")
  ```

---

### 📁 `api.py`
- **Role**: Application-facing task runner interface
- **Responsibility**:
  - Loads `tokenizer` and `model` via `get_model_loader()`
  - Gets `GenerationConfig` from `project_config`
  - Calls `run_llm_task()` with everything injected
- **Recommended function name**: `run_llm_task_with_config`

---

### 📁 `task_router.py`
- **Role**: Task dispatcher / router
- **Responsibility**:
  - Maps `task_type` string → task function (`summarize`, `translate`, etc.)
  - Passes `tokenizer`, `model`, and `config` into each task
- **Function**:
  ```python
  run_llm_task(task_type: str, tokenizer, model, config, **kwargs)
  ```

---

### 📁 `task_manager.py`
- **Role**: Prompt + parsing logic for each task
- **Responsibility**:
  - Build prompts
  - Call `llm_call(...)` or `llm_call_with_thinking(...)`
  - Parse response using `extract_tagged_content()`
  - Return structured Pydantic output

---

### 📁 `llm_inference.py`
- **Role**: Centralized LLM calling logic
- **Responsibility**:
  - Handles `.generate()` logic with `GenerationConfig`
  - One function for basic use: `llm_call(...)`
  - One function for reasoning: `llm_call_with_thinking(...)`

---

### 📁 `project_config.py`
- **Role**: Behavior preset registry
- **Responsibility**:
  - Defines `GenerationConfig` for each task + mode
  - Allows task-level overrides and shared sampling strategy

---

### 📁 `model_loader/dispatch_loader.py`
- **Role**: Model selection switch
- **Responsibility**:
  - Loads `HF_ModelLoader` or `AWQ_ModelLoader` based on `loader_type` string
  - Returns `(tokenizer, model)` tuple

---

### 📁 `hf_loader.py`, `awq_loader.py`
- **Role**: Singleton model loaders
- **Responsibility**:
  - Load/caches the specified HF or AWQ quantized model
  - Read path/name from `.env` or from caller

---

### 📁 `key_word_extractor.py`
- **Role**: Keyword-specific extraction pipeline
- **Responsibility**:
  - Handles prompt building, model call, and parsing
  - Uses `model.generate(...)` directly
  - Fully injectable with `tokenizer`, `model`

---

## ✅ Summary

Your pipeline now separates concerns cleanly:

| Concern             | Module                     |
|---------------------|----------------------------|
| Task intent         | `task_manager.py`          |
| Model execution     | `llm_inference.py`         |
| Routing             | `task_router.py`           |
| Top-level injection | `api.py`                   |
| Model loading       | `dispatch_loader.py`       |
| Config control      | `project_config.py`        |
| Entrypoints         | `main.py`, `main_test_*.py`|

Let me know and I’ll help scaffold `llm_call.py` and `api.py` to match this exactly.